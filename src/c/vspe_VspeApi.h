/* VSPE-Wrapper (VIRTUAL SERIAL PORTS EMULATOR) - VSPE Api Java Wrapper.
 * © Alexey Sokolov (scream3r), 2013.
 *
 * This file is part of VSPE-Wrapper.
 *
 * VSPE-Wrapper is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * VSPE-Wrapper is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with VSPE-Wrapper.  If not, see <http://www.gnu.org/licenses/>.
 *
 * e-mail: scream3r.org@gmail.com
 * web-site: https://github.com/scream3r
 */

/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class vspe_VspeApi */

#ifndef _Included_vspe_VspeApi
#define _Included_vspe_VspeApi
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     vspe_VspeApi
 * Method:    activate
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_vspe_VspeApi_activate
  (JNIEnv *, jclass, jstring);

/*
 * Class:     vspe_VspeApi
 * Method:    initialize
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_vspe_VspeApi_initialize
  (JNIEnv *, jclass);

/*
 * Class:     vspe_VspeApi
 * Method:    loadConfiguration
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_vspe_VspeApi_loadConfiguration
  (JNIEnv *, jclass, jstring);

/*
 * Class:     vspe_VspeApi
 * Method:    saveConfiguration
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_vspe_VspeApi_saveConfiguration
  (JNIEnv *, jclass, jstring);

/*
 * Class:     vspe_VspeApi
 * Method:    createDevice
 * Signature: (Ljava/lang/String;Ljava/lang/String;)I
 */
JNIEXPORT jint JNICALL Java_vspe_VspeApi_createDevice
  (JNIEnv *, jclass, jstring, jstring);

/*
 * Class:     vspe_VspeApi
 * Method:    destroyDevice
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_vspe_VspeApi_destroyDevice
  (JNIEnv *, jclass, jint);

/*
 * Class:     vspe_VspeApi
 * Method:    getDevicesCount
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_vspe_VspeApi_getDevicesCount
  (JNIEnv *, jclass);

/*
 * Class:     vspe_VspeApi
 * Method:    getDeviceIdByIdx
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_vspe_VspeApi_getDeviceIdByIdx
  (JNIEnv *, jclass, jint);

/*
 * Class:     vspe_VspeApi
 * Method:    getDeviceIdByComPortIndex
 * Signature: (I)I
 */
JNIEXPORT jint JNICALL Java_vspe_VspeApi_getDeviceIdByComPortIndex
  (JNIEnv *, jclass, jint);

/*
 * Class:     vspe_VspeApi
 * Method:    getDeviceInfo
 * Signature: (I)[Ljava/lang/String;
 */
JNIEXPORT jobjectArray JNICALL Java_vspe_VspeApi_getDeviceInfo
  (JNIEnv *, jclass, jint);

/*
 * Class:     vspe_VspeApi
 * Method:    reinitializeDevice
 * Signature: (I)Z
 */
JNIEXPORT jboolean JNICALL Java_vspe_VspeApi_reinitializeDevice
  (JNIEnv *, jclass, jint);

/*
 * Class:     vspe_VspeApi
 * Method:    destroyAllDevices
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_vspe_VspeApi_destroyAllDevices
  (JNIEnv *, jclass);

/*
 * Class:     vspe_VspeApi
 * Method:    startEmulation
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_vspe_VspeApi_startEmulation
  (JNIEnv *, jclass);

/*
 * Class:     vspe_VspeApi
 * Method:    stopEmulation
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_vspe_VspeApi_stopEmulation
  (JNIEnv *, jclass);

/*
 * Class:     vspe_VspeApi
 * Method:    release
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_vspe_VspeApi_release
  (JNIEnv *, jclass);

/*
 * Class:     vspe_VspeApi
 * Method:    getVersionInformation
 * Signature: ()Ljava/lang/String;
 */
JNIEXPORT jstring JNICALL Java_vspe_VspeApi_getVersionInformation
  (JNIEnv *, jclass);

#ifdef __cplusplus
}
#endif
#endif
